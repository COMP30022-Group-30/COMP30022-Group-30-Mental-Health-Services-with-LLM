"""
Django settings for Backened project.
Generated by 'django-admin startproject' using Django 5.2.5.
"""

from pathlib import Path
import os

# -------------------------------------------------------------------
# Paths
# -------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# -------------------------------------------------------------------
# Core security/runtime config (env-driven; sensible local defaults)
# -------------------------------------------------------------------
SECRET_KEY = os.getenv("SECRET_KEY", "dev-unsafe-key")
DEBUG = os.getenv("DJANGO_DEBUG", "False").lower() == "true"

# Comma-separated hostnames, e.g. "api.example.com,foo.bar"
ALLOWED_HOSTS = [h for h in os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if h]

# CSRF trusted origins must be full origins with scheme, e.g.
# "https://your-eb-domain,https://your-vercel-app"
CSRF_TRUSTED_ORIGINS = [o for o in os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",") if o]

# Behind a proxy/ALB (Elastic Beanstalk) make secure scheme detection correct
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# -------------------------------------------------------------------
# Applications
# -------------------------------------------------------------------
INSTALLED_APPS = [
    # external apps
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",

    # internal apps
    "chat",
    "services",
    "accounts",

    # default apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# -------------------------------------------------------------------
# Middleware
# -------------------------------------------------------------------
MIDDLEWARE = [
    # external first: CORS
    "corsheaders.middleware.CorsMiddleware",

    # default
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# -------------------------------------------------------------------
# CORS (env can override; default allows localhost for dev)
# -------------------------------------------------------------------
# Default for local development
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]
# If env var is present, override with its comma-separated list
_env_cors = [o for o in os.getenv("CORS_ALLOWED_ORIGINS", "").split(",") if o]
if _env_cors:
    CORS_ALLOWED_ORIGINS = _env_cors

# -------------------------------------------------------------------
# URLs / Templates / WSGI
# -------------------------------------------------------------------
ROOT_URLCONF = "Backened.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Backened.wsgi.application"

# -------------------------------------------------------------------
# Database
# - default: local sqlite in project directory
# - on EB: set SQLITE_PATH=/tmp/db.sqlite3 to use a writable path
# -------------------------------------------------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

_sqlite_override = os.getenv("SQLITE_PATH")
if _sqlite_override:
    DATABASES["default"]["NAME"] = _sqlite_override

# -------------------------------------------------------------------
# Password validation
# -------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -------------------------------------------------------------------
# Internationalization
# -------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# -------------------------------------------------------------------
# Static files
# - EB will run collectstatic to STATIC_ROOT and Nginx will serve it
# -------------------------------------------------------------------
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# -------------------------------------------------------------------
# Default PK field type
# -------------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
