import uuid
import structlog
from typing import Dict, Any, List, Optional
from openai import OpenAI

from app.config import get_settings
from core.database.vector_search import get_vector_search_service

logger = structlog.get_logger(__name__)


class MentalHealthChatService:
    """Simple chat service with vector search."""
    
    def __init__(self):
        self.settings = get_settings()
        self._openai_client: Optional[OpenAI] = None
        self._vector_search = None
    
    @property
    def openai_client(self) -> OpenAI:
        """Get or create OpenAI client."""
        if self._openai_client is None:
            self._openai_client = OpenAI(api_key=self.settings.openai_api_key)
        return self._openai_client
    
    @property
    def vector_search(self):
        """Get vector search service."""
        if self._vector_search is None:
            self._vector_search = get_vector_search_service()
        return self._vector_search
    
    def _generate_ai_response(
        self,
        query: str,
        search_results: List[Dict[str, Any]]
    ) -> str:
        """Generate AI response using OpenAI with full service details."""
        try:
            # Build context with FULL details (address, website, etc.)
            context_parts = []
            for idx, service in enumerate(search_results, 1):
                # Build full address
                address_parts = []
                if service.get('address'):
                    address_parts.append(service['address'])
                if service.get('suburb'):
                    address_parts.append(service['suburb'])
                if service.get('state'):
                    address_parts.append(service['state'])
                if service.get('postcode'):
                    address_parts.append(service['postcode'])
                
                full_address = ', '.join(address_parts) if address_parts else 'Address not available'
                
                # Format service with all details
                service_info = (
                    f"{idx}. {service.get('service_name', 'Unknown Service')}\n"
                    f"   Organization: {service.get('organisation_name', 'N/A')}\n"
                    f"   Full Address: {full_address}\n"
                    f"   Service Type: {service.get('service_type', 'N/A')}\n"
                    f"   Delivery Method: {service.get('delivery_method', 'N/A')}\n"
                    f"   Cost: {service.get('cost', 'N/A')}\n"
                )
                
                # Add all contact details
                if service.get('phone'):
                    service_info += f"   Phone: {service['phone']}\n"
                if service.get('email'):
                    service_info += f"   Email: {service['email']}\n"
                if service.get('website'):
                    service_info += f"   Website: {service['website']}\n"
                
                # Add notes if available (truncate if too long)
                if service.get('notes'):
                    notes = service['notes'][:150]
                    service_info += f"   Additional Info: {notes}...\n"
                
                context_parts.append(service_info)
            
            context = "\n".join(context_parts) if context_parts else "No services found matching the criteria."
            
            # Enhanced system prompt
            system_prompt = """You are a helpful mental health support assistant for Victoria, Australia.

Your role:
- Help people find appropriate mental health services
- Be warm, empathetic, and professional
- Provide clear, actionable next steps

CRITICAL INSTRUCTIONS:
1. Present ALL services provided in the context (usually 3-7 services based on confidence)
2. For EACH service, you MUST include:
   - Service name
   - FULL street address (not just suburb)
   - COMPLETE website URL if available
   - Phone number
   - Cost information (especially highlight if FREE or bulk-billed)

Response format:
- Brief empathetic acknowledgment (1-2 sentences)
- List all services with complete details
- Suggest next steps (call, visit website)
- For any crisis mentions: Include Lifeline 13 11 14

Response style:
- Use clear formatting with line breaks between services
- Make addresses and websites easy to read and copy
- Be conversational but professional
- Present all services - don't skip any

Example format:
"I found [number] services that can help with [need] in [area]:

**[Service 1 Name]**
Address: [Full street address, suburb, state postcode]
Phone: [number]
Website: [full URL]
Cost: [Free/Paid/Bulk-billed]
[Brief what they offer]

**[Service 2 Name]**
Address: [Full street address, suburb, state postcode]
...

You can contact any of these services directly. I'd recommend calling to discuss your needs and book an appointment."

IMPORTANT: Always include full addresses and websites when available. Never abbreviate or omit contact details.

For crisis situations, ALWAYS include: "Immediate support is available at 000 at any time."
"""
            
            # Generate response with enough tokens for full details
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"User query: {query}\n\nAvailable services (present ALL of these):\n{context}\n\nProvide a helpful response with complete contact details for each service."}
            ]
            
            response = self.openai_client.chat.completions.create(
                model=self.settings.openai_model,
                messages=messages,
                temperature=0.7,
                max_tokens=1200  # Increased to allow full details for multiple services
            )
            
            return response.choices[0].message.content
        
        except Exception as e:
            logger.error("Failed to generate AI response", error=str(e))
            
            # Fallback with full details for top result
            if search_results:
                top = search_results[0]
                address = f"{top.get('address', '')}, {top.get('suburb', '')}, {top.get('state', '')} {top.get('postcode', '')}"
                
                fallback = (
                    f"I found {len(search_results)} services. Here's the top result:\n\n"
                    f"**{top.get('service_name')}**\n"
                    f"Address: {address}\n"
                )
                if top.get('phone'):
                    fallback += f"Phone: {top['phone']}\n"
                if top.get('website'):
                    fallback += f"Website: {top['website']}\n"
                if top.get('cost'):
                    fallback += f"Cost: {top['cost']}\n"
                
                fallback += "\nPlease contact them directly for more information."
                return fallback
            else:
                return (
                    "I'm having trouble right now. For immediate support:\n"
                    "- Lifeline: 13 11 14 (24/7)\n"
                    "- Beyond Blue: 1300 22 4636\n"
                    "- Emergency: 000"
                )
    
    async def process_message(
        self,
        message: str,
        session_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """Process a user message and return response."""
        try:
            # Generate session_id if not provided
            if not session_id:
                session_id = str(uuid.uuid4())
            
            logger.info("Processing message", session_id=session_id)
            
            # Crisis check
            crisis_keywords = ['suicide', 'kill myself', 'want to die', 'end it all', 'no point living']
            if any(keyword in message.lower() for keyword in crisis_keywords):
                logger.warning("Crisis query detected")
                return {
                    "message": (
                        "I'm concerned about what you've shared. Please reach out for immediate support:\n\n"
                        "üÜò **In an emergency**: Call 000\n"
                        "üìû **Lifeline**: 13 11 14 (24/7 crisis support)\n"
                        "üí¨ **Lifeline Text**: 0477 13 11 14\n"
                        "üåê **Lifeline Chat**: www.lifeline.org.au/crisis-chat\n\n"
                        "**Other crisis services:**\n"
                        "- Beyond Blue: 1300 22 4636\n"
                        "- Suicide Call Back Service: 1300 659 467\n"
                        "- Kids Helpline (under 25): 1800 55 1800\n\n"
                        "You don't have to face this alone. These services are confidential and available right now."
                    ),
                    "session_id": session_id,
                    "services_found": 0,
                    "query_successful": True,
                    "action": "crisis_halt"
                }
            
            # Vector search (smart_search already does confidence-based filtering)
            try:
                search_results = self.vector_search.smart_search(query=message)
                logger.info("Search completed", 
                           query=message,
                           results_count=len(search_results))
            except Exception as e:
                logger.error("Vector search failed", error=str(e))
                search_results = []
            
            # Generate AI response (will present all results from smart_search)
            ai_response = self._generate_ai_response(message, search_results)
            
            return {
                "message": ai_response,
                "session_id": session_id,
                "services_found": len(search_results),
                "query_successful": True,
                "raw_data": search_results[:5] if search_results else []  # Return up to 5 for frontend
            }
        
        except Exception as e:
            logger.error("Failed to process message", error=str(e))
            
            return {
                "message": "I encountered an error. Please try again.",
                "session_id": session_id or str(uuid.uuid4()),
                "services_found": 0,
                "query_successful": False
            }


# Singleton
_chat_service: Optional[MentalHealthChatService] = None


async def get_chat_service() -> MentalHealthChatService:
    """Get chat service singleton."""
    global _chat_service
    if _chat_service is None:
        _chat_service = MentalHealthChatService()
    return _chat_service